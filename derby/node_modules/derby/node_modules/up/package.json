{
  "name": "up",
  "description": "Zero downtime reloads for Node HTTP(S) servers.",
  "tags": [
    "cluster",
    "reload",
    "process",
    "monitor",
    "graceful",
    "restart"
  ],
  "homepage": "https://github.com/learnboost/up",
  "version": "0.2.2",
  "bin": {
    "up": "./bin/up"
  },
  "main": "./lib/up",
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "eq": "0.1.0",
    "ms": "0.1.0",
    "debug": "0.1.0",
    "commander": "0.6.1",
    "distribute": "0.1.4"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "express": "*",
    "superagent": "*"
  },
  "readme": "\n# Up\n\nZero-downtime reloads built on top of the\n[distribute](http://github.com/learnboost/distribute) load balancer.\n\nSimply running\n\n```bash\n$ up --port 80 --watch my-http-server.js\n```\n\nWill start `my-http-server.js` on port 80, then reload it with no downtime\nwhen files change in the working directory.\n\n## Features\n\n- Works with Node 0.6+\n- Works at the HTTP request level. It never drops requests or destroys\n  `Keep-Alive` sockets while reloading.\n- Compatible with any HTTP server.\n- Easy-to-use CLI interface for development with automatic reloading\n  upon file changes.\n- Gracefully handles reloads with syntax errors during development.\n- Built on [distribute](http://github.com/learnboost/distribute).\n\n## Setup\n\nMake sure you structure your code so that your `http` server lives in a\nseparate module that can be `require`d.\n\n**server.js**\n\n```js\nmodule.exports = http.Server(function (req, res) {\n  res.writeHead(200);\n  res.end('Hello World');\n});\n```\n\n### A) CLI\n\nTo get the `up` command, make sure to install with the `-g` flag:\n\n```bash\n$ npm install -g up\n```\n\n**Usage: up [options] <file>**\n\nThe `up` command accepts the following options:\n\n- `-p`/`--port`\n\n  - the port to listen on. Not required if the module already `listen`s.\n  - Defaults to `3000`.\n\n- `-w`/`--watch`\n\n  - Whether to watch for changes.\n  - Watches the working directory for changes.\n\n- `-r`/`--require` `<mod>`\n\n  - Specifies a module to require from each worker.\n  - Can be used multiple times.\n\n- `-n`/`--number`\n\n  - number of workers. It gets evaluated with\n    [eq.js](https://gist.github.com/1590954).\n  - You can optionally use the `cpus` variable. eg: `cpus + 2`.\n  - You can use all the `Math` methods. eg: `round(cpus / 2)`.\n  - Defaults to number of CPUS, or `1` if `NODE_ENV` is `development`.\n\n- `-t`/`--timeout`\n\n  - number of ms after which a worker is killed once it becomes inactive.\n  - Strings like `'10s'` are accepted.\n  - Defaults to `'10m'`, or `'500ms'` if `NODE_ENV` is `development`.\n\n- `-f`/`--pidfile`\n\n  - a filename to write the pid to\n  - If specified, restarts can be achieved with: \"kill -s SIGUSR2 `cat pidfile.txt`\"\n\n### B) JavaScript API\n\n```js\nvar up = require('up')\n  , master = http.Server().listen(3000)\n\n// initialize up\nvar srv = up(master, __dirname + '/server');\n\nprocess.on('SIGUSR2', function () {\n  srv.reload();\n});\n```\n\n`require('up')` exports the `UpServer` constructor, which takes three\nparameters:\n\n- server (`http.Server`) server to accept connections on\n- module (`String`) absolute path to the module.\n- options (`Object`)\n  - `numWorkers`: (`Number`|`String`): see `--workers` above.\n  - `workerTimeout`: (`Number`|`String`): see `--timeout` above.\n\n## Middleware\n\nAn `UpServer` inherits from a `Distributor`, which means you can `use()`\nany [distribute](http://github.com/learnboost/distribute) middleware.\n\nThe main difference is that the \"default handler\" of up (ie: the last\nfunction in the middleware chain) is the one that executes the\nround-robin load balancing.\n\n## Reloading\n\nTo reload the workers, call `srv.reload()`. In the example above and CLI,\nthis is called by sending the `SIGUSR2` signal:\n\n```bash\n$ kill -s SIGUSR2 <process id>\n```\n\nIf you're running with `up` CLI, this command is output to stderr for your\nconvenience.\n\nThe CLI tool also auto-reloads if you pass the `--watch` option and a file\nchanges in the working directory.\n\n### Strategy\n\n1. An up server starts with an arbitrary number of workers, which defaults\nto the number of CPUs.\n2. When a reload instruction is received, it spawns an identical number of\nworkers.\n3. Upon the first of those workers binding to a port, any subsequent\n**requests** are sent to that worker, and all the workers containing old\ncode are discarded.\n4. The discarded workers could have been processing requests, so they only\ntruly die after the configured `workerTimeout`, which defaults to 10\nminutes in production. This means that if a user was uploading a file, his\nrequest will be processed without interruptions.\n5. As other workers bind and become available, they join the round-robin\nround.\n\n## Credits\n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "up@0.2.2",
  "_from": "up@>=0.1.4"
}
