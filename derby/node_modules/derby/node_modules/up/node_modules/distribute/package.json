{
  "name": "distribute",
  "description": "Load balancer / proxy / router organized around Express/Connect-like middleware.",
  "version": "0.1.4",
  "tags": [
    "connect",
    "middleware",
    "proxy",
    "load balancer",
    "balance",
    "vhost",
    "virtual"
  ],
  "main": "./distribute",
  "dependencies": {
    "debug": "0.1.0",
    "http-proxy": "0.8.0"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "superagent": "*"
  },
  "readme": "# Distribute\n\n**Distribute** is a middleware-based API to expressively perform request\nrouting / load balancing in Node.JS.\n\n## How to use\n\n### Normal HTTP\n\n```js\nvar http = require('http').createServer().listen(3000)\n  , srv = require('distribute')(http);\n\nsrv.use(function (req, res, next) {\n  if (req.headers.host == 'blog.mydomain.com') {\n    next(8000);\n  } else {\n    next();\n  }\n});\n\nsrv.use(function (req, res, next) {\n  somethingAsync(function (err, host, port) {\n    if (err) return next(err); // sends a `500` and cleans up\n    next(port, host);\n  });\n});\n```\n\n### WebSocket\n\nRequests triggered by the `upgrade` event (as a result of the `Upgrade`\nHTTP header) are handled by prepending the `ws` flag each time you call\n`use`.\n\n```js\nserver.ws.use(function (req, socket, next) {\n  next(3000);\n});\n```\n\n## Features\n\n- Leverages the well-tested `node-http-proxy`.\n- Simplicity of Express.\n- Compatible with connect middleware (eg: qs parser, cookie decoder).\n- Middleware makes sticky/session load balancing trivial to write.\n- Middleware can perform async tasks.\n  **Distribute** manages buffers transparently for you.\n\n## API\n\n### next\n\nThe `next` parameter can take three signatures:\n\n  - no parameters (`next()`) will execute the next middleware. If no\n    middleware is available, an error is displayed (refer to the \"Default\n    behaviors section\")\n  - port (`Number`)\n  - port (`Number`), host (`String`)\n\n### req\n\n**Distribute** adds two properties to request objects:\n\n#### req.buf\n\nThe `node-http-proxy` data buffer.\n\n#### req.head\n\nFor WS requests, the first packet of the stream, only present for legacy\npurposes.\n\n## Behaviors\n\n### Error handling\n\nWhen an `Error` object is passed to next, or when no middleware will\nhandle a given request, the default behavior is to show a\n`500 Internal Server Error` (for HTTP requests) or the socket is ended \n(WS requests). In development (ie: NODE_ENV is set to `development`), a\nstack trace is sent along with the error code.\n\nIf you want to define custom \"error handling middleware\", you can do so\nby adding a function with 4 parameters instead of 3 (in other words, with\nan arity of 4).\n\n```js\n// regular requests\nsrv.use(function (err, req, res, next) {\n  next();\n});\n\n// ws requests\nsrv.use(function (err, req, socket, next) {\n  next();\n});\n```\n\nIt's not necessary to pass the error to `next` to trigger the next error \nmiddleware.\n\n### Buffers\n\nRequest data buffers are cleaned up automatically when:\n\n  - a response is produced prematurely instead of proxying. For example\n\n  ```js\n  srv.use(function (req, res, next) {\n    res.writeHead(204);\n    res.end();\n  });\n  ```\n\n  - a socket for an upgrade is `.end` or `.destroy` prematurely:\n\n  ```js\n  srv.ws.use(function (req, socket, next) {\n    socket.end();\n  });\n  ```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "distribute@0.1.4",
  "_from": "distribute@0.1.4"
}
